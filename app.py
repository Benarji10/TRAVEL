from flask import Flask, jsonify, render_template, request, redirect, url_for, flash, session

from flask_sqlalchemy import SQLAlchemy
from passlib.hash import bcrypt_sha256

import stripe
stripe.api_key = 'kkalyankumar@2484'
app = Flask(__name__)
app.config['SECRET_KEY'] = 'jaishreeram@7777' 
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:@localhost/signin' 
app.config['SESSION_TYPE'] = 'filesystem'

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)

class Hampi(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    gender = db.Column(db.String(20), nullable=False)
    date_of_departure = db.Column(db.Date, nullable=False)
    amount = db.Column(db.Float, nullable=False)

class Belur(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    gender = db.Column(db.String(20), nullable=False)
    date_of_departure = db.Column(db.Date, nullable=False)
    amount = db.Column(db.Float, nullable=False)

class Tirupathi(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    gender = db.Column(db.String(20), nullable=False)
    date_of_departure = db.Column(db.Date, nullable=False)
    amount = db.Column(db.Float, nullable=False) 

class Kashi(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    gender = db.Column(db.String(20), nullable=False)
    date_of_departure = db.Column(db.Date, nullable=False)
    amount = db.Column(db.Float, nullable=False)   

class WebsiteReview(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    rating = db.Column(db.Integer, nullable=False)
    review_text = db.Column(db.Text, nullable=False)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/guide')
def guide():
    return render_template('guide.html')

@app.route('/package')
def package():
    return render_template('package.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()

        if user and bcrypt_sha256.verify(password, user.password):
            flash('Logged in successfully!', 'success')
            return redirect(url_for('home'))
        else:
            flash('Invalid email or password', 'error')

    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        hashed_password = bcrypt_sha256.hash(password)
        
        new_user = User(email=email, password=hashed_password)
        
        db.session.add(new_user)
        db.session.commit()
        
        flash('Account created successfully!', 'success')
        return redirect(url_for('login'))

    return render_template('signup.html')
@app.route('/home')
def home():
   
    average_rating = db.session.query(db.func.avg(WebsiteReview.rating)).scalar()
    
    average_rating = round(average_rating) if average_rating is not None else 0

    
    return render_template('home.html', average_rating=average_rating)



from datetime import datetime

@app.route('/submit_data1', methods=['GET', 'POST'])
def submit_data1():
    if request.method == 'POST':
        data = request.get_json()
        people_data = data.get('peopleData', [])

        # Store the submitted data in the session
        session['people_data'] = people_data

        # Redirect to the payment page
        return redirect(url_for('payment'))

    return render_template('submit_data1.html')


@app.route('/payment', methods=['GET','POST'])
def payment():
    if request.method == 'POST':
        # Handle payment process using Stripe
        token = request.form['stripeToken']  # This is the token generated by Stripe.js

        # Retrieve data from the session
        people_data = session.get('people_data', [])

        try:
            # Create a charge
            charge = stripe.Charge.create(
                amount=1000,  # Amount in cents (example: $10.00)
                currency='usd',
                source=token,
                description='Payment for People Information'
            )

            # Payment was successful, proceed to store data in the database
            for person in people_data:
                name = person.get('name')
                age = person.get('age')
                gender = person.get('gender')
                date_of_departure = datetime.strptime(person.get('date_of_departure'), '%Y-%m-%d').date()
                amount = person.get('amount')
                new_hampi_data = Hampi(name=name, age=age, gender=gender, date_of_departure=date_of_departure, amount=amount)
                db.session.add(new_hampi_data)

            db.session.commit()
            session.pop('people_data')  # Clear the session data after storing in the database

            return jsonify({'message': 'Payment successful and data submitted'})
        except stripe.error.CardError as e:
            # Handle card error
            return jsonify({'error': e.user_message}), 400
        except stripe.error.StripeError as e:
            # Handle other Stripe errors
            return jsonify({'error': str(e)}), 500

    return render_template('payment.html', stripe_publishable_key='kkalyankumar@2484')



@app.route('/submit_data2', methods=['GET', 'POST'])
def submit_data2():
    if request.method == 'POST':
        data = request.get_json()
        people_data = data.get('peopleData', [])

        # Store the submitted data in the session
        session['people_data'] = people_data

        # Redirect to the payment page
        return redirect(url_for('payment2'))

    return render_template('submit_data2.html')


@app.route('/payment2', methods=['GET','POST'])
def payment2():
    if request.method == 'POST':
        # Handle payment process using Stripe
        token = request.form['stripeToken']  # This is the token generated by Stripe.js

        # Retrieve data from the session
        people_data = session.get('people_data', [])

        try:
            # Create a charge
            charge = stripe.Charge.create(
                amount=1000,  # Amount in cents (example: $10.00)
                currency='usd',
                source=token,
                description='Payment for People Information'
            )

            # Payment was successful, proceed to store data in the database
            for person in people_data:
                name = person.get('name')
                age = person.get('age')
                gender = person.get('gender')
                date_of_departure = datetime.strptime(person.get('date_of_departure'), '%Y-%m-%d').date()
                amount = person.get('amount')

                new_belur_data = Belur(name=name, age=age, gender=gender, date_of_departure=date_of_departure, amount=amount)
                db.session.add(new_belur_data)

            db.session.commit()
            session.pop('people_data')  # Clear the session data after storing in the database

            return jsonify({'message': 'Payment successful and data submitted'})
        except stripe.error.CardError as e:
            # Handle card error
            return jsonify({'error': e.user_message}), 400
        except stripe.error.StripeError as e:
            # Handle other Stripe errors
            return jsonify({'error': str(e)}), 500

    return render_template('payment2.html', stripe_publishable_key='kkalyankumar@2484')


@app.route('/submit_data3', methods=['GET', 'POST'])
def submit_data3():
    if request.method == 'POST':
        data = request.get_json()
        people_data = data.get('peopleData', [])

        # Store the submitted data in the session
        session['people_data'] = people_data

        # Redirect to the payment page
        return redirect(url_for('payment3'))

    return render_template('submit_data3.html')


@app.route('/payment3', methods=['GET','POST'])
def payment3():
    if request.method == 'POST':
        # Handle payment process using Stripe
        token = request.form['stripeToken']  # This is the token generated by Stripe.js

        # Retrieve data from the session
        people_data = session.get('people_data', [])

        try:
            # Create a charge
            charge = stripe.Charge.create(
                amount=1000,  # Amount in cents (example: $10.00)
                currency='usd',
                source=token,
                description='Payment for People Information'
            )

            # Payment was successful, proceed to store data in the database
            for person in people_data:
                name = person.get('name')
                age = person.get('age')
                gender = person.get('gender')
                date_of_departure = datetime.strptime(person.get('date_of_departure'), '%Y-%m-%d').date()
                amount = person.get('amount')

                new_tirupathi_data = Tirupathi(name=name, age=age, gender=gender, date_of_departure=date_of_departure, amount=amount)
                db.session.add(new_tirupathi_data)

            db.session.commit()
            session.pop('people_data')  # Clear the session data after storing in the database

            return jsonify({'message': 'Payment successful and data submitted'})
        except stripe.error.CardError as e:
            # Handle card error
            return jsonify({'error': e.user_message}), 400
        except stripe.error.StripeError as e:
            # Handle other Stripe errors
            return jsonify({'error': str(e)}), 500

    return render_template('payment3.html', stripe_publishable_key='kkalyankumar@2484')

@app.route('/submit_data4', methods=['GET', 'POST'])
def submit_data4():
    if request.method == 'POST':
        data = request.get_json()
        people_data = data.get('peopleData', [])

        # Store the submitted data in the session
        session['people_data'] = people_data

        # Redirect to the payment page
        return redirect(url_for('payment4'))

    return render_template('submit_data4.html')


@app.route('/payment4', methods=['GET','POST'])
def payment4():
    if request.method == 'POST':
        # Handle payment process using Stripe
        token = request.form['stripeToken']  # This is the token generated by Stripe.js

        # Retrieve data from the session
        people_data = session.get('people_data', [])

        try:
            # Create a charge
            charge = stripe.Charge.create(
                amount=1000,  # Amount in cents (example: $10.00)
                currency='usd',
                source=token,
                description='Payment for People Information'
            )

            # Payment was successful, proceed to store data in the database
            for person in people_data:
                name = person.get('name')
                age = person.get('age')
                gender = person.get('gender')
                date_of_departure = datetime.strptime(person.get('date_of_departure'), '%Y-%m-%d').date()
                amount = person.get('amount')

                new_kashi_data = Tirupathi(name=name, age=age, gender=gender, date_of_departure=date_of_departure, amount=amount)
                db.session.add(new_kashi_data)

            db.session.commit()
            session.pop('people_data')  # Clear the session data after storing in the database

            return jsonify({'message': 'Payment successful and data submitted'})
        except stripe.error.CardError as e:
            # Handle card error
            return jsonify({'error': e.user_message}), 400
        except stripe.error.StripeError as e:
            # Handle other Stripe errors
            return jsonify({'error': str(e)}), 500

    return render_template('payment4.html', stripe_publishable_key='kkalyankumar@2484')

@app.route('/clear_form', methods=['POST'])
def clear_form():
    return jsonify({'message': 'Form cleared successfully'})



@app.route('/submit_website_review', methods=['POST'])
def submit_website_review():
    if request.method == 'POST':
        name = request.form['name']
        rating = int(request.form['rating'])
        review_text = request.form['review_text']

        new_review = WebsiteReview(name=name, rating=rating, review_text=review_text)
        db.session.add(new_review)
        db.session.commit()

        flash('Review submitted successfully!', 'success')
        return redirect(url_for('website_reviews'))

    return render_template('website_reviews.html')  # Render the template in case of errors

@app.route('/website_reviews')
def website_reviews():
    reviews = WebsiteReview.query.all()
    return render_template('website_reviews.html', reviews=reviews)


@app.route('/images_hampi')
def images_hampi():
    return render_template('images_hampi.html')

@app.route('/images_belur')
def images_belur():
    return render_template('images_belur.html')

@app.route('/images_tirupati')
def images_tirupati():
    return render_template('images_tirupati.html')

@app.route('/get_ticket', methods=['GET', 'POST'])
def get_ticket():
    if request.method == 'POST':
        passenger_name = request.form['passenger_name']

        # Query the database to find the ticket details by passenger name
        ticket_data = None
        ticket_data_hampi = Hampi.query.filter_by(name=passenger_name).first()
        ticket_data_belur = Belur.query.filter_by(name=passenger_name).first()
        ticket_data_tirupathi = Tirupathi.query.filter_by(name=passenger_name).first()
        ticket_data_kashi = Kashi.query.filter_by(name=passenger_name).first()

        if ticket_data_hampi:
            ticket_data = ticket_data_hampi
            ticket_data.table_name = 'Hampi'
        elif ticket_data_belur:
            ticket_data = ticket_data_belur
            ticket_data.table_name = 'Belur'
        elif ticket_data_tirupathi:
            ticket_data = ticket_data_tirupathi
            ticket_data.table_name = 'Tirupathi'
        elif ticket_data_kashi:
            ticket_data = ticket_data_kashi
            ticket_data.table_name = 'Kashi'

        return render_template('ticket_details.html', ticket_data=ticket_data)

    return render_template('get_ticket.html')


if __name__ == '__main__':
    with app.app_context():  # Set up application context
        db.create_all()
    app.run(debug=True)
